{"remainingRequest":"/Users/lchsir/Downloads/学习资料/Notes/Vue3/vue3-project/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/lchsir/Downloads/学习资料/Notes/Vue3/vue3-project/src/views/gome/test.vue?vue&type=template&id=2415b397","dependencies":[{"path":"/Users/lchsir/Downloads/学习资料/Notes/Vue3/vue3-project/src/views/gome/test.vue","mtime":1642407665000},{"path":"/Users/lchsir/Downloads/学习资料/Notes/Vue3/vue3-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lchsir/Downloads/学习资料/Notes/Vue3/vue3-project/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/lchsir/Downloads/学习资料/Notes/Vue3/vue3-project/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/lchsir/Downloads/学习资料/Notes/Vue3/vue3-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lchsir/Downloads/学习资料/Notes/Vue3/vue3-project/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBpZD0ibmF2Ij4KICAgIOasoui/juadpeWIsHZ1ZTPnmoTkuJbnlYwKICAgIDxkaXY+CiAgICAgIOWGheWuue+8mnt7IG5hbWUgfX0KICAgICAgPHA+YToge3sgYSB9fTwvcD4KICAgICAgPHA+Yzoge3sgYyB9fTwvcD4KICAgICAgPHA+cmVmVmFsOiB7eyByZWZWYWwgfX08L3A+CiAgICAgIDxwPmlkOiB7eyBpZCB9fTwvcD4KICAgICAgPHA+dHlwZToge3sgdHlwZSB9fTwvcD4KICAgICAgPGJ1dHRvbiBAY2xpY2s9ImNoYW5nZSgpIj5jbGljazwvYnV0dG9uPgogICAgICA8YnV0dG9uIEBjbGljaz0iZ28oKSI+6Lez6L2sPC9idXR0b24+CiAgICA8L2Rpdj4KICA8L2Rpdj4K"},{"version":3,"sources":["/Users/lchsir/Downloads/学习资料/Notes/Vue3/vue3-project/src/views/gome/test.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACV,CAAC,CAAC,CAAC,CAAC;MACF,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;MACZ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAChB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/lchsir/Downloads/学习资料/Notes/Vue3/vue3-project/src/views/gome/test.vue","sourceRoot":"","sourcesContent":["<template>\n  <div id=\"nav\">\n    欢迎来到vue3的世界\n    <div>\n      内容：{{ name }}\n      <p>a: {{ a }}</p>\n      <p>c: {{ c }}</p>\n      <p>refVal: {{ refVal }}</p>\n      <p>id: {{ id }}</p>\n      <p>type: {{ type }}</p>\n      <button @click=\"change()\">click</button>\n      <button @click=\"go()\">跳转</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { reactive, ref, onMounted, toRefs, computed, watch } from 'vue' // 按需加载\nimport { useRouter } from 'vue-router'\nexport default {\n  setup (props, context) { // beforeCreate之前调用\n    console.log('context', context)\n\n    const router = useRouter();\n    // 1、reactive：(复杂类型，基本类型不能) 创建响应式数据对象，相当于vue中的data()\n    const state = reactive({\n      id: 0,\n      name: 'abc',\n      type: '',\n      refVal: ref(200),\n      // 计算属性\n      n1: computed(() => {\n        state.id += 1\n      })\n    })\n    let x = reactive(10) // 注：无法处理基本类型，因为不是响应式\n\n\n    // 2、ref（基本类型）\n    var a = 100 // 非响应式\n    var c = ref(10) // 响应式，返回一个只有value属性的对象\n\n\n    // 4、生命周期\n    onMounted(() => {\n      setInterval(function () {\n        state.refVal += 10  // 如果ref在reactive中定义，直接state.属性名\n      }, 1000)\n    })\n\n\n    // 3、定义函数方法\n    const change = () => {\n      a += 1\n      c.value += 1\n      console.log(c.value)\n\n      if (c.value == 20) {\n        stopWatch() // 清除监听\n      }\n    }\n\n    // 4、定义方法组\n    const methods = {\n      fun1 () { },\n      fun2 () { },\n      go() {\n        console.log('路由跳转')\n        router.push({\n          path: '/gome/about',\n          query: {\n            id: 1\n          }\n        })\n      }\n    }\n\n    // 5、watch\n    const stopWatch = watch(() => c.value, (cur, old) => {\n      state.type = cur % 2 === 0 ? '偶数' : '奇数'\n    })\n\n\n    // setup函数中将响应式数据对象return出去供template使用\n    return {\n      a,\n      c,\n      ...toRefs(state), // 用到扩展运算符、解构等，需要使用toRefs将其变为响应式的\n      ...methods,\n      change\n    }\n  }\n}\n</script>\n\n\n<style>\n</style>\n"]}]}